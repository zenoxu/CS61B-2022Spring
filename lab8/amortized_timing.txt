Q: Is one GrowList implementation always better than the others?
A:Yes. The JavaGrow list method is consistently the most efficient at adding elements to a list.

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A:Each time the array becomes full, the size is double, and insertion continues until the array is full again.
Because of this, insertion time is going to be roughly equal to the number of elements being inserted.

Q: Why is the runtime for N insertions into a arithmetically resizing list a Theta(N^2) operation?
A:Each time the array become full, it increased by 1. The process repeat n times, so it takes Theta(N^2)

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList? Specifically look at the non-accumulated plots and desribe the trends for how long each operation takes as a function of how many elements have already been inserted in the list.
A:The runtime for ArithGrowList is the largest, while GeomGrowList and JavaGrowList are significantly quicker.

Q: When are there spikes in the per operation runtime graphs for each of the implementations? Do these make sense to you? Hint: some of these should and others might not. Empirical runtime can be quite messy and depends on machine specifics which will be revealed in other subsequent classes like CS61C.
A:The spikes occur when the array needs to be re-sized to fit new elements. The graph make sense

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: